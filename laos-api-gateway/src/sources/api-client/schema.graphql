schema {
  query: Query
  mutation: Mutation
}

type Query {
  status: String!
}

type Mutation {
  mint(input: MintInput!): MintResponse!
  batchMint(input: BatchMintInput!): BatchMintResponse!
  evolve(input: EvolveInput!): EvolveResponse!
  broadcast(input: BroadcastInput!): BroadcastResponse!
}

type MintResponse {
  tokenId: String!
  success: Boolean!
}

input MintInput {
  chainId: String!
  contractAddress: String!
  mintTo: String!
  name: String!
  description: String
  attributes: String
  image: String
}

type BatchMintResponse {
  numberOfTokens: Int!
  tokenIds: [String!]!
  success: Boolean!
}

input BatchMintInput {
  chainId: String!
  contractAddress: String!
  tokens: [TokenInput!]!
}

input TokenInput {
  name: String!
  description: String
  attributes: String
  image: String
  mintTo: [String!]!
}

type EvolveResponse {
  tokenId: String!
  success: Boolean!
  tokenUri: String!
  tx: String!
}

input EvolveInput {
  chainId: String!
  contractAddress: String!
  tokenId: String!
  name: String!
  description: String
  attributes: String
  image: String
}

type BroadcastResponse {
  tokenId: String!
  success: Boolean!
}

input BroadcastInput {
  tokenId: String!
  chainId: String!
  ownershipContractAddress: String!
}